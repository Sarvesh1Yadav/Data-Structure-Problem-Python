Problem Statement - Quicksort usually has a running time of nlog(n), but is there an algorithm that can sort even faster? 
In general, this is not possible. Most sorting algorithms are comparison sorts, i.e. they sort a list just by comparing the elements to one another.
A comparison sort algorithm cannot beat  nlog(n)(worst-case) running time, since nlog(n) represents the minimum number of comparisons needed to know where to place each element


import math
import os
import random
import re
import sys

def countingSort(arr):
    # Write your code here
    maximum = max(arr)
    c = [0]*100
    
    for i in range(100):
        count = 0
        for j in range(len(arr)):
            if i==arr[j]:
                count+=1
        c[i] = c[i]+count
    return c
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
